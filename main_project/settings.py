"""
Django settings for main_project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
# import django_heroku
from dotenv import load_dotenv
# import dj_database_url

 # Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == "True"

# ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split(" ")
ALLOWED_HOSTS = ['127.0.0.1', 'localhost', '192.168.8.169', '192.168.189.180', '192.168.137.133', '192.168.144.180', '192.168.137.216', '192.168.155.180', '192.168.155.244', 'poo-drf.onrender.com', '192.168.8.106']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_yasg',
    'inventory',
    'user',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]



CORS_ALLOWED_ORIGINS = [
    # "http://localhost:8000",
    "http://127.0.0.1:5173",
    "http://localhost:5173",
    # "http://192.168.8.169:5173",
    "https://poo-drf.onrender.com"
]

CORS_ALLOW_ALL_ORIGINS = True 

ROOT_URLCONF = 'main_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'dist')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME':'semu',
        'USER':'root',
        'PASSWORD':'Leul1992',
        'HOST':'localhost',
        'PORT':'3306',
    },
    'semu': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME':'semu',
        'USER':'root',
        'PASSWORD':'Leul1992',
        'HOST':'localhost',
        'PORT':'3306',
    }
}
# database_url = os.getenv('DATABASE_URL')
# DATABASES['default'] = dj_database_url.parse(database_url)


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [

    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# STATIC_URL = 'static/'


STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'dist/static')
# ]
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'dist', 'static')  # os.path.join for consistency
]

# Older
# MEDIA_URL = 'media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')

# Fixed Version
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# MEDIA_ROOT = BASE_DIR / 'media'



SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'
        }
    },
    'USE_SESSION_AUTH': False,  # Disable session auth if only using JWT
    'DEFAULT_API_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
       'rest_framework_simplejwt.authentication.JWTAuthentication',
    ]
}



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=300),  # Short lifespan for access tokens to reduce security risks.
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Longer lifespan for refresh tokens to enhance user experience.
    'ROTATE_REFRESH_TOKENS': False,                  # Rotate refresh tokens to improve security by invalidating old tokens.
    'BLACKLIST_AFTER_ROTATION': False,               # Blacklist old refresh tokens after rotation to prevent reuse.
    'AUTH_HEADER_TYPES': ('Bearer',),               # Use "Bearer" schema for authorization headers.
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),  # Standard AccessToken class for JWT.
    'TOKEN_USER_CLASS': 'myapp.models.CustomUser',  # Optional: Customize to point to your user model, if needed.
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=15), # Optional: Configure sliding tokens if used.
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=7), # Optional: Refresh sliding tokens within this duration.
    'SIGNING_KEY': 'your-strong-secret-key',        # Use a strong secret key for signing tokens.
    'ALGORITHM': 'HS256',                           # Default signing algorithm.
    'ISSUER': 'user',                      # Optional: Add issuer information for token validation.
}


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'user.UserAccount'

# django_heroku.settings(locals())
